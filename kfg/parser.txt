Start -> Sections

%Ugly Patch: Collect any garbage keyword at EOF - WDL allowed it
%Sections -> Section Sections | EPSILON
Sections -> Section Sections | Keyword | EPSILON
Section -> ObjectDef | FunctionDef | AssetDef | GlobalDef | } | { | ;
%Superfluous closing curly braces and semicolons may be put - capture these as dummy section

GlobalDef -> Global GlobalParameter ; | Event ObjectIdList ;
Global -> global | ambig_global_property | ambig_global_synonym_property | Skill
Event -> event | ambig_event_property
ObjectIdList -> ObjectId ObjectIdList | ObjectId
GlobalParameter -> Number | File | String | Identifier

AssetDef -> AssetRef AssetId File AssetParams ;
AssetParams -> AssetParam AssetParams | EPSILON 
AssetParam -> Integer
AssetRef -> asset

ObjectDef -> Object ObjectId ; | Object ObjectId { PropertyDefs } | Object ObjectId String ;
ObjectRef -> object
%TODO is this special case still required?
Object -> ObjectRef | ambig_object_flag 
PropertyDefs -> PropertyDef PropertyDefs | EPSILON
PropertyDef -> Property PropertyValueList ; | ;
PropertyValueList -> PropertyValue PropertyValueList | PropertyValue 
PropertyValue -> Number | File | String | KeywordPar

FunctionDef -> Function FunctionId { Instructions }
Function -> function
%Compatibility patch - Goto markers may also be terminated by ; instead of : (use identifier instead of GotoMarker for patch; causes reduce/reduce conflicts otherwise)
Instructions -> Instruction Instructions | GotoMarker : Instructions | identifier ; Instructions | Flow Instructions | { Instructions } Instructions | EPSILON
%Compatibility patch - A3 allows bogus instructions (capture as Identifier)
%Instruction -> Command ; | Command ParameterList ; | Rule ; | ;
Instruction -> Command ; | Command ParameterList ; | Rule ; | Identifier ParameterList ; | ;

ParameterList -> Parameter ParameterList | Parameter
Parameter -> Number | File | String | KeywordPar | List

Expression -> LogicOr
LogicOr -> LogicOr '||' LogicAnd | LogicAnd
LogicAnd -> LogicAnd && BitOr | BitOr
BitOr -> BitOr '|' BitXor | BitXor
BitXor -> BitXor ^ BitAnd | BitAnd
BitAnd -> BitAnd & Equality | Equality
Equality -> Equality OpEq Comparison | Comparison
Comparison -> Comparison OpCmp Term | Term
Term -> Term OpTerm Factor | Factor 
Factor -> Factor OpFac Unary | Unary 
Unary -> OpUn Unary | Primary
%add stupid "SKILL 6 --> 6" and "18,4 --> 18" workarounds
%Primary -> UnNumber | Keyword | ( Expression ) | Math ( Expression ) | List
Primary -> UnNumber | Keyword | ( Expression ) | Math ( Expression ) | List | Keyword integer | integer integer

OpEq -> == | !=
OpCmp -> <= | >= | < | > 
OpTerm -> + | -
OpFac -> / | * | %
OpUn -> - | + | !

%WDL parser allows RULEs without assignment and statements similar to SET a,b;
%Rule -> RULE Keyword OpAssign Expression | Keyword OpAssign Expression
Rule -> RULE Keyword OpAssign Expression | RULE Expression | Keyword OpAssign Expression
OpAssign -> = | += | -= | *= | /=
Math -> math | ambig_math_command | ambig_math_skill_property

%Compatibility patch - WDL parser accepts isolated ELSE ... Needs to be taken care of by code generator
%Flow -> IF Expression { Instructions } | IF Expression { Instructions } ELSE { Instructions } | WHILE Expression { Instructions }
Flow -> IF Expression { Instructions } | ELSE { Instructions } | WHILE Expression { Instructions }

Keyword -> BasicKeyword | BasicKeyword . Property | BasicKeyword . Flag
KeywordPar -> OpUn Keyword | Keyword
Flag -> flag | ambig_synonym_flag | ambig_object_flag | ambig_command_flag | ambig_skill_flag
Property -> property | AssetRef | ObjectRef | ambig_event_property | ambig_skill_property | ambig_global_synonym_property | ambig_global_property | ambig_math_skill_property | ambig_command_property
Command -> command | ambig_command_flag | ambig_command_property | ambig_math_command | ELSE
Number -> Integer | Fixed
UnNumber -> integer | fixed
Integer -> OpUn integer | integer
Fixed -> OpUn fixed | fixed
Identifier -> identifier
List -> list

Skill -> skill | ambig_skill_property | ambig_math_skill_property

EngineKeywords -> event | global | asset | object | function | math | flag | property | command | ambig_global_property | ambig_event_property | ambig_object_flag | ambig_math_command | ambig_command_flag | ambig_command_property
EngineObjects -> skill | synonym | ambig_math_skill_property | ambig_synonym_flag | ambig_skill_property | ambig_global_synonym_property | ambig_skill_flag
BasicKeyword -> EngineKeywords | EngineObjects | Identifier | NULL
%add stupid "identifier-name" / "identifier-123" workarounds
HackKeyword -> BasicKeyword | identifier - identifier | identifier - integer
%ObjectId -> BasicKeyword
ObjectId -> HackKeyword
%FunctionId -> BasicKeyword
FunctionId -> HackKeyword
%Note: Asset identifiers may start with numbers in WDL. Needs to be captured with regex and taken care of by code generator
%AssetId -> BasicKeyword | integer
AssetId -> HackKeyword | integer
GotoMarker -> BasicKeyword

%Complex Regex terminals must be added at end of token list
File -> file
String -> string

%Ambiguous keyword lists - used in case some keywords are used multiple times in different contexts
%- ambig_event_property
%- ambig_skill_property
%- ambig_global_property
%- ambig_global_synonym_property
%- ambig_synonym_flag
%- ambig_object_flag
%- ambig_math_command
%- ambig_math_skill_property
%- ambig_command_property
%- ambig_skill_flag

%Regex patches - Odd behavior captured with regex and needs to be taken care of by code generator
%- Combined assign operators += etc. may have spaces inbetween. 
%- Comma separator may be put multiple times and at end of instruction right before ;. 
%- File name may have leading and traling spaces e.g. <file.wdl >. TODO: cleaner filename detection
%- skills may be defined like global definitions
%- SET instruction allows := instead of , as assignment operator
