Start -> Sections


Sections -> Section Sections | EPSILON
Section -> SimpleItem | ComplexItem | Define | Include | Predefined | Preprocessor

Preprocessor -> IFDEF Identifier ; PreprocessorSection | IFNDEF Identifier ; PreprocessorSection 
PreprocessorSection -> Sections ENDIF; | Sections IFELSE; Sections ENDIF;
PreprocInst -> IFDEF Identifier ; PreprocInstSection | IFNDEF Identifier ; PreprocInstSection 
PreprocInstSection -> Instructions ENDIF; | Instructions IFELSE; Instructions ENDIF;

Define -> DEFINE Identifier , Parameter ; | DEFINE Identifier ; | UNDEF Identifier ;
Include -> INCLUDE File ;

%TODO name this properly
Predefined -> Identifier PredefinedParameter ;
PredefinedParameter -> Number | File | String | Keyword

SimpleItem -> Identifier Parameters ;

%TODO: support RULES{} which is a group of RULE statements (a = b;)
ComplexItem -> Identifier Identifier Sep { Instructions }
Instructions -> Instruction ; Instructions | Identifier : Instructions | Flow Instructions | PreprocInst Instructions | EPSILON
Instruction -> Identifier | Parameters | Calc

Parameters -> Identifier ParameterList
ParameterList -> Parameter Sep ParameterList | Parameter
Parameter -> Number | Keyword | File | String

%Compatibility patches - WDL parser allowed syntax violating the specification
%WDL parser allows leaving/adding commas
Parameters -> Identifier , ParameterList
Sep -> , | EPSILON

Expression -> LogicOr
LogicOr -> LogicOr '||' LogicAnd | LogicAnd
LogicAnd -> LogicAnd && BitOr | BitOr
BitOr -> BitOr '|' BitXor | BitXor
BitXor -> BitXor ^ BitAnd | BitAnd
BitAnd -> BitAnd & Equality | Equality
Equality -> Equality OpEq Comparison | Comparison
Comparison -> Comparison OpCmp Term | Term
Term -> Term OpTerm Factor | Factor 
Factor -> Factor OpFac Unary | Unary 
Unary -> OpUn Unary | Primary
Primary -> UnNumber | Keyword | ( Expression ) | Math ( Expression )

OpEq -> == | !=
OpCmp -> <= | >= | < | > 
OpTerm -> + | -
OpFac -> / | * | %
OpUn -> ! | - | +

Calc -> Identifier Keyword OpAssign Expression
OpAssign -> = | += | -= | *= | /=
Math -> SIN | COS | TAN | ASIN | ACOS | SQRT | SIGN | ABS | INT | EXP | LOG | LOG10 | LOG2 | RANDOM

%WDL parser accepts isolated ELSE ... Needs to be taken care of by code generator
%Flow -> IF Expression{ Instructions } | IF Expression { Instructions } ELSE { Instructions } | WHILE Expression { Instructions }
Flow -> IF Expression { Instructions } | ELSE { Instructions } | WHILE Expression { Instructions }

Keyword -> Identifier | Identifier . Identifier | NULL
Number -> OpUn number | number
UnNumber -> number

%Math function identifiers are ambiguous in original WDL syntax. can be value/variable as well as math function
Identifier -> identifier | Math 
%Note: Identifiers may start with numbers in WDL. Needs to be captured with regex and taken care of by code generator
%Note: Identifiers support dot-separated slot index, e.g. LAYERS.1. Needs to be captured with regex and taken care of by code generator

%Complex Regex terminals must be added at end of token list
File -> file
String -> string

%Regex patches - Odd behavior captured with regex and needs to be taken care of by code generator
%Combined assign operators += etc. may have spaces inbetween. 
%Command terminator ; may be put multiple times without error. 
%Comma separator may be put at end of instruction right before ;. 
%A false ; may be put right after closing curly brace.
%File name may have leading and traling spaces e.g. <file.wdl >. TODO: cleaner filename detection