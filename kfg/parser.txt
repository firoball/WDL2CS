Start -> Code
Code -> TopSection Code | TopSection
TopSection -> Preprocessor | Section
Preprocessor -> IFDEF Identifier ; PreprocessorSection | IFNDEF Identifier ; PreprocessorSection 
PreprocessorSection -> Sections ENDIF; | Sections IFELSE; Sections ENDIF;
Sections -> Section Sections | EPSILON
Section -> SimpleItem | ComplexItem | Define | Predefined

Define -> DEFINE Identifier , Number ; | DEFINE Identifier , Keyword ; | DEFINE Identifier ;

Predefined -> Identifier PredefinedParameter ;
PredefinedParameter -> Number | File | String | Keyword

SimpleItem -> Identifier Parameters ;

ComplexItem -> Identifier Identifier Sep { Instructions }
Instructions -> Instruction ; Instructions | Identifier : Instructions | Flow Instructions | EPSILON
Instruction -> Identifier | Parameters | Calc

Parameters -> Identifier ParameterList
ParameterList -> Parameter Sep ParameterList | Parameter
Parameter -> Number | Keyword | File | String

Sep -> , | EPSILON

Calc -> Identifier Keyword Assign Expression
Expression -> Expr | Expression Op ExpressionRight | ( Expression )
ExpressionRight -> Expr | ( Expression )
Expr -> Number | OptionalSign Keyword | OptionalSign Math ( Expression )
Op -> OpPM | * | / | % | '|' | ^ | & 
OpPM -> + | -
Assign -> = | += | -= | *= | /=
Math -> SIN | COS | TAN | ASIN | ACOS | SQRT | SIGN | ABS | INT | EXP | LOG | LOG10 | LOG2 | RANDOM

%WDL parser accepts isolated ELSE ... Needs to be taken care of by code generator
%Flow -> IF ( Comparison ) { Instructions } | IF ( Comparison ) { Instructions } ELSE { Instructions } | WHILE ( Comparison ) { Instructions }
Flow -> IF ( Comparison ) { Instructions } | ELSE { Instructions } | WHILE ( Comparison ) { Instructions }
Comparison -> Comparison Cmp ComparisonRight | ( ComparisonNoExpr ) | Expression
ComparisonRight -> ( ComparisonNoExpr ) | Expression
%fix reduce/shift conflict with () in Comparison and Expression nesting
ComparisonNoExpr -> Comparison Cmp ComparisonRight | ( ComparisonNoExpr )
Cmp -> '||' | && | != | == | <= | >= | < | > 

%Comparison -> ComparisonHack '|' ComparisonRight
%ComparisonHack -> Comparison Cmp ComparisonHack | Expr | ( ComparisonNoExpr )

Keyword -> Identifier | Identifier . Identifier

%Resolve ambiguity of +/- operators in math expressions
OptionalSign -> OpPM | EPSILON

%avoid reduce/shift conflicts - make sign optional and separated
Number -> OptionalSign number 

%Math function identifiers are ambiguous in original WDL syntax. can be value/variable as well as math function
Identifier -> identifier | Math 
%Note: Identifiers may start with numbers in WDL. Needs to be captured with regex and taken care of by code generator
%Note: Identifiers support dot-separated slot index, e.g. LAYERS.1. Needs to be captured with regex and taken care of by code generator

%Complex Regex terminals must be added at end of token list
File -> file
String -> string

%Compatibility patches - WDL parser allowed syntax violating the specification
%WDL parser allows leaving/adding commas
Parameters -> Identifier , ParameterList
%WDL parser allows IF/WHILE without enclosing parantheses
IfWhilePatch -> ( Comparison ) Cmp ( Comparison ) | ( Comparison ) Cmp IfWhilePatch
Flow -> IF IfWhilePatch { Instructions } | IfWhilePatch { Instructions } ELSE { Instructions } | WHILE IfWhilePatch { Instructions }
%WDL parser accepts isolated ELSE ... Needs to be ignored by code generator

%Regex patches - Odd behavior captured with regex and needs to be taken care of by code generator
%Combined assign operators += etc. may have spaces inbetween. 
%Command terminator ; may be put multiple times without error. 
%comma separator may be put at end of instruction right before ;. 
%a false ; may be put right after closing curly brace.