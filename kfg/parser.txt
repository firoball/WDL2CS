Start -> Sections

Sections -> Section Sections | EPSILON
Section -> ObjectDef | FunctionDef | AssetDef | Define | Include | GlobalDef | Preprocessor | }
%Superfluous closing curly braces may be put - capture these as dummy section

Preprocessor -> IFDEF DefIdentifier ; PreprocessorSection ; | IFNDEF DefIdentifier ; PreprocessorSection ;
PreprocessorSection -> Sections ENDIF | Sections IFELSE ; Sections ENDIF
PreprocInst -> IFDEF DefIdentifier ; PreprocInstSection ; | IFNDEF DefIdentifier ; PreprocInstSection ;
PreprocInstSection -> Instructions ENDIF | Instructions IFELSE ; Instructions ENDIF
PreprocProp -> IFDEF DefIdentifier ; PreprocPropSection ; | IFNDEF DefIdentifier ; PreprocPropSection ;
PreprocPropSection -> PropertyDefs ENDIF | PropertyDefs IFELSE ; PropertyDefs ENDIF

Define -> DEFINE DefIdentifier , DefParameter ; | DEFINE DefIdentifier ; | UNDEF DefIdentifier ;
%Allow ambiguity between predefined skills and defines. WDL allowed it.
DefIdentifier -> Identifier | Skill
DefParameter -> Number | Keyword | File | String | List
Include -> INCLUDE File ;

GlobalDef -> Global Sep GlobalParameter ; | Event Sep ObjectIdList ;
Global -> global | ambig_global_property | ambig_global_synonym_property | Skill
Event -> event | ambig_event_property
ObjectIdList -> ObjectId Sep ObjectIdList | ObjectId Sep
GlobalParameter -> Number | File | String | Identifier

AssetDef -> AssetRef AssetId Sep File Sep AssetParams ;
AssetParams -> Integer | Integer , AssetParams | EPSILON 
AssetRef -> asset

ObjectDef -> Object ObjectId ; | Object ObjectId Sep { PropertyDefs } | Object ObjectId Sep String ;
ObjectRef -> object
Object -> ObjectRef | ambig_object_flag 
PropertyDefs -> PropertyDef ; PropertyDefs | PreprocProp PropertyDefs | EPSILON
PropertyDef -> Property Sep PropertyValueList
PropertyValueList -> PropertyValue Sep PropertyValueList | PropertyValue Sep 
PropertyValue -> Number | Object | ObjectId | ObjectId . Property | ObjectId . Flag | Synonym | Synonym . Property | Synonym . Flag | Function | File | String

FunctionDef -> Function FunctionId Sep { Instructions }
Function -> function
%Compatibility patch - Goto markers may also be terminated by ; instead of : (use ifddentifier instead of GotoMarker for patch; causes reduce/reduce conflicts otherwise)
Instructions -> Instruction ; Instructions | GotoMarker : Instructions | identifier ; Instructions | Flow Instructions | PreprocInst Instructions | | { Instructions } Instructions | EPSILON
Instruction -> Command | Command Sep ParameterList | Rule

ParameterList -> Parameter Sep ParameterList | Parameter Sep
Parameter -> Number | Keyword | File | String | List

%Compatibility patch - WDL parser allows leaving/adding commas
Sep -> , | EPSILON

Expression -> LogicOr
LogicOr -> LogicOr '||' LogicAnd | LogicAnd
LogicAnd -> LogicAnd && BitOr | BitOr
BitOr -> BitOr '|' BitXor | BitXor
BitXor -> BitXor ^ BitAnd | BitAnd
BitAnd -> BitAnd & Equality | Equality
Equality -> Equality OpEq Comparison | Comparison
Comparison -> Comparison OpCmp Term | Term
Term -> Term OpTerm Factor | Factor 
Factor -> Factor OpFac Unary | Unary 
Unary -> OpUn Unary | Primary
Primary -> UnNumber | Keyword | ( Expression ) | Math ( Expression )

OpEq -> == | !=
OpCmp -> <= | >= | < | > 
OpTerm -> + | -
OpFac -> / | * | %
OpUn -> - | + | !

%WDL parser allowed RULEs without assignment
Rule -> RULE Keyword OpAssign Expression | RULE Expression | Keyword OpAssign Expression
OpAssign -> = | += | -= | *= | /=
Math -> math | ambig_math_command | ambig_math_skill_property

%Compatibility patch - WDL parser accepts isolated ELSE ... Needs to be taken care of by code generator
%Flow -> IF Expression{ Instructions } | IF Expression { Instructions } ELSE { Instructions } | WHILE Expression { Instructions }
Flow -> IF Expression { Instructions } | ELSE { Instructions } | WHILE Expression { Instructions }

%Due to parallel grammar pathes caused by ambiguous identifiers, some expected relations are not added here - they already exist implicitly
%This is required in order to avoid shift/reduce conflicts in generated transpiler code
Keyword -> Object | ObjectId | ObjectId . Property | ObjectId . Flag | Synonym | Synonym . Property | Synonym . Flag | Event
Flag -> flag | ambig_synonym_flag | ambig_object_flag | ambig_command_flag
%Properties must also allow redefinitions (= identifier)
%Property -> property | AssetRef | ObjectRef | ambig_event_property | ambig_skill_property | ambig_global_synonym_property | ambig_global_property | ambig_math_skill_property | ambig_command_property
Property -> property | AssetRef | ObjectRef | ambig_event_property | ambig_skill_property | ambig_global_synonym_property | ambig_global_property | ambig_math_skill_property | ambig_command_property | Identifier
Command -> CommandAsId | ambig_math_command | ELSE
%commands can also be used as object identifiers. Define reduced CommandAsId subset for ObjectId rule in order to avoid shift/reduce conflicts.
CommandAsId -> command | ambig_command_flag | ambig_command_property 
Number -> Integer | Fixed
UnNumber -> integer | fixed
Integer -> OpUn integer | integer
Fixed -> OpUn fixed | fixed
Identifier -> identifier
List -> list

%Note: Asset identifiers may start with numbers in WDL. Needs to be captured with regex and taken care of by code generator
%AssetId -> identifier | integer
AssetId -> ObjectId | integer
Skill -> skill | ambig_skill_property 
%| ambig_math_skill_property - implicitly via Math (avoid shift/reduce conflicts)

Synonym -> synonym | ambig_synonym_flag | ambig_global_synonym_property
%WDL allows usage of reserved keywords as object identifiers (list is derived from test runs on a collection of WDL files)
%Changing this can easily cause more shift/reduce conflicts
ObjectId -> identifier | AssetRef | Math | flag | Skill | property | CommandAsId | global | NULL
FunctionId -> ObjectId | ObjectRef
GotoMarker -> ObjectId | synonym

%Complex Regex terminals must be added at end of token list
File -> file
String -> string

%Ambiguous keyword lists - used in case some keywords are used multiple times in different contexts
%ambig_event_property
%ambig_skill_property
%ambig_global_property
%ambig_global_synonym_property
%ambig_synonym_flag
%ambig_object_flag
%ambig_math_command
%ambig_math_skill_property
%ambig_command_property

%Regex patches - Odd behavior captured with regex and needs to be taken care of by code generator
%Combined assign operators += etc. may have spaces inbetween. 
%Command terminator ; may be put multiple times without error. 
%Comma separator may be put at end of instruction right before ;. 
%A false ; may be put right after closing curly brace.
%File name may have leading and traling spaces e.g. <file.wdl >. TODO: cleaner filename detection
%skills may be defined like global definitions
%SET instruction allows := instead of , as assignment operator
